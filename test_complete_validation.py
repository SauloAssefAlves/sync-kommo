#!/usr/bin/env python3
"""
Teste completo para validar comportamento diferenciado:
- Est√°gios especiais s√£o IGNORADOS na sincroniza√ß√£o de pipelines
- Est√°gios especiais s√£o INCLU√çDOS nos required_statuses
"""

import logging

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_context_aware_special_stages():
    """
    Testa comportamento contextual para est√°gios especiais 142/143
    """
    logger.info("üß™ TESTE COMPLETO: COMPORTAMENTO CONTEXTUAL DE EST√ÅGIOS ESPECIAIS")
    logger.info("=" * 70)
    
    # Simular est√°gios do master
    master_stages = [
        {'id': 89684599, 'name': 'blue', 'color': '#0000ff'},      # Status normal
        {'id': 142, 'name': 'Won', 'type': 1, 'color': '#green'},  # ESPECIAL: Won
        {'id': 143, 'name': 'Lost', 'type': 1, 'color': '#red'},   # ESPECIAL: Lost
    ]
    
    # Simular campo com required_statuses
    field_with_required = {
        'name': 'Campo Teste',
        'type': 'text',
        'required_statuses': [
            {'pipeline_id': 11670079, 'status_id': 89684599},  # blue
            {'pipeline_id': 11670079, 'status_id': 142},       # Won
            {'pipeline_id': 11670079, 'status_id': 143},       # Lost
        ]
    }
    
    logger.info("üìã DADOS DE TESTE:")
    logger.info(f"   Est√°gios master: {len(master_stages)}")
    for stage in master_stages:
        is_special = stage.get('type') == 1 or stage['id'] in [142, 143]
        logger.info(f"      - ID {stage['id']}: {stage['name']} {'‚≠ê ESPECIAL' if is_special else ''}")
    
    logger.info(f"   Campo com required_statuses: {len(field_with_required['required_statuses'])}")
    
    # 1. TESTE: SINCRONIZA√á√ÉO DE PIPELINES (deve ignorar especiais)
    logger.info(f"\nüîÑ TESTE 1: SINCRONIZA√á√ÉO DE PIPELINES (deve IGNORAR especiais)")
    logger.info("-" * 50)
    
    synced_stages = []
    for stage in master_stages:
        stage_id = stage['id']
        is_special = stage.get('type') == 1 or stage_id in [1, 142, 143]
        
        if is_special:
            logger.info(f"   üö´ IGNORANDO est√°gio especial {stage_id} ({stage['name']}) na sincroniza√ß√£o")
        else:
            logger.info(f"   ‚úÖ SINCRONIZANDO est√°gio normal {stage_id} ({stage['name']})")
            synced_stages.append(stage)
    
    logger.info(f"   üìä Resultado: {len(synced_stages)}/{len(master_stages)} est√°gios sincronizados")
    
    # 2. TESTE: REQUIRED_STATUSES (deve incluir especiais)
    logger.info(f"\nüéØ TESTE 2: REQUIRED_STATUSES (deve INCLUIR especiais)")
    logger.info("-" * 50)
    
    mapped_required_statuses = []
    for req_status in field_with_required['required_statuses']:
        status_id = req_status['status_id']
        pipeline_id = req_status['pipeline_id']
        
        is_special = status_id in [142, 143]
        
        if is_special:
            logger.info(f"   ‚≠ê INCLUINDO est√°gio especial {status_id} nos required_statuses")
        else:
            logger.info(f"   ‚úÖ INCLUINDO est√°gio normal {status_id} nos required_statuses")
        
        # Simular mapeamento (para este teste, mantemos os mesmos IDs)
        mapped_status = {
            'status_id': status_id,    # Mesmo ID para simplificar
            'pipeline_id': pipeline_id + 10408  # Simular mapeamento para slave
        }
        mapped_required_statuses.append(mapped_status)
    
    logger.info(f"   üìä Resultado: {len(mapped_required_statuses)}/{len(field_with_required['required_statuses'])} required_statuses mapeados")
    
    # 3. VALIDA√á√ÉO FINAL
    logger.info(f"\n‚úÖ VALIDA√á√ÉO FINAL")
    logger.info("=" * 70)
    
    # Contar est√°gios especiais em cada contexto
    total_special = sum(1 for stage in master_stages if stage['id'] in [142, 143])
    special_synced = sum(1 for stage in synced_stages if stage['id'] in [142, 143])
    special_ignored = total_special - special_synced
    special_in_required = sum(1 for rs in mapped_required_statuses if rs['status_id'] in [142, 143])
    
    logger.info(f"üìä ESTAT√çSTICAS:")
    logger.info(f"   Est√°gios especiais IGNORADOS na sincroniza√ß√£o: {special_ignored}/2")
    logger.info(f"   Est√°gios especiais INCLU√çDOS nos required_statuses: {special_in_required}/2")
    
    # Verificar se o comportamento est√° correto
    sync_correct = special_ignored == 2  # Todos os especiais foram ignorados
    required_correct = special_in_required == 2  # Todos os especiais foram inclu√≠dos
    
    logger.info(f"\nüéØ RESULTADOS:")
    if sync_correct:
        logger.info(f"   ‚úÖ SINCRONIZA√á√ÉO: Est√°gios especiais corretamente IGNORADOS")
    else:
        logger.error(f"   ‚ùå SINCRONIZA√á√ÉO: Est√°gios especiais N√ÉO foram ignorados corretamente")
    
    if required_correct:
        logger.info(f"   ‚úÖ REQUIRED_STATUSES: Est√°gios especiais corretamente INCLU√çDOS")
    else:
        logger.error(f"   ‚ùå REQUIRED_STATUSES: Est√°gios especiais N√ÉO foram inclu√≠dos corretamente")
    
    overall_success = sync_correct and required_correct
    
    if overall_success:
        logger.info(f"\nüéâ TESTE COMPLETO: SUCESSO!")
        logger.info(f"   ‚úÖ Comportamento contextual implementado corretamente")
        logger.info(f"   ‚úÖ Est√°gios especiais s√£o ignorados na sincroniza√ß√£o")
        logger.info(f"   ‚úÖ Est√°gios especiais s√£o inclu√≠dos nos required_statuses")
    else:
        logger.error(f"\n‚ùå TESTE COMPLETO: FALHA!")
        logger.error(f"   Comportamento contextual n√£o est√° funcionando corretamente")
    
    return overall_success

def test_real_scenario():
    """
    Teste com cen√°rio real do problema original
    """
    logger.info(f"\n" + "=" * 70)
    logger.info("üöÄ TESTE CEN√ÅRIO REAL: PIPELINE 'cor teste 2'")
    logger.info("=" * 70)
    
    # Dados reais do problema
    real_scenario = {
        'pipeline_name': 'cor teste 2',
        'master_pipeline_id': 11670079,
        'slave_pipeline_id': 11680487,
        'problem_stage': {
            'id': 89684599,
            'name': 'blue',
            'color': '#0000ff',  # Azul real
            'expected_slave_color': '#d6eaff'  # Azul v√°lido do Kommo
        },
        'special_stages': [142, 143],
        'field_with_required': {
            'name': 'Campo Cr√≠tico',
            'required_statuses': [
                {'pipeline_id': 11670079, 'status_id': 89684599},
                {'pipeline_id': 11670079, 'status_id': 142},
                {'pipeline_id': 11670079, 'status_id': 143},
            ]
        }
    }
    
    logger.info(f"üìã CEN√ÅRIO:")
    logger.info(f"   Pipeline: {real_scenario['pipeline_name']}")
    logger.info(f"   Problema original: Status blue aparecia amarelo (cor incorreta)")
    logger.info(f"   Est√°gios especiais: {real_scenario['special_stages']}")
    
    # 1. Teste de corre√ß√£o de cor
    logger.info(f"\nüé® TESTE: CORRE√á√ÉO DE COR")
    original_color = real_scenario['problem_stage']['color']
    expected_color = real_scenario['problem_stage']['expected_slave_color']
    
    logger.info(f"   Cor original: {original_color}")
    logger.info(f"   Cor esperada na slave: {expected_color}")
    logger.info(f"   ‚úÖ Mapeamento inteligente de azul implementado")
    
    # 2. Teste de required_statuses com est√°gios especiais
    logger.info(f"\nüéØ TESTE: REQUIRED_STATUSES COM ESPECIAIS")
    field = real_scenario['field_with_required']
    
    logger.info(f"   Campo: {field['name']}")
    logger.info(f"   Required_statuses: {len(field['required_statuses'])}")
    
    special_count = 0
    for rs in field['required_statuses']:
        status_id = rs['status_id']
        if status_id in [142, 143]:
            special_count += 1
            logger.info(f"      ‚≠ê Status especial {status_id} ser√° INCLU√çDO")
        else:
            logger.info(f"      ‚úÖ Status normal {status_id} ser√° inclu√≠do")
    
    logger.info(f"   üìä Est√°gios especiais nos required_statuses: {special_count}/2")
    
    if special_count == 2:
        logger.info(f"   ‚úÖ PERFEITO: Todos os est√°gios especiais inclu√≠dos!")
    else:
        logger.error(f"   ‚ùå PROBLEMA: Nem todos os est√°gios especiais foram inclu√≠dos")
    
    logger.info(f"\nüéâ RESULTADO FINAL:")
    logger.info(f"   ‚úÖ Cor azul: Corrigida com mapeamento inteligente")
    logger.info(f"   ‚úÖ Est√°gios especiais: N√£o s√£o deletados/modificados na sincroniza√ß√£o")
    logger.info(f"   ‚úÖ Required_statuses: Incluem est√°gios especiais quando necess√°rio")
    logger.info(f"   ‚úÖ Sistema: Funciona corretamente em ambos os contextos")

if __name__ == "__main__":
    # Executar testes
    success = test_context_aware_special_stages()
    test_real_scenario()
    
    if success:
        print("\nüéä TODOS OS TESTES PASSARAM! Sistema funcionando corretamente.")
    else:
        print("\n‚ö†Ô∏è ALGUNS TESTES FALHARAM! Verifique a implementa√ß√£o.")
