#!/usr/bin/env python3
"""
Script simples para testar sincroniza√ß√£o de custom fields e capturar logs
"""

import sys
import os
import logging
from datetime import datetime

# Configurar logging detalhado
log_filename = f"sync_test_{datetime.now().strftime('%Y%m%d_%H%M%S')}.log"
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_filename),
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)

def test_sync_custom_fields():
    """Testa sincroniza√ß√£o de campos customizados"""
    logger.info("üß™ INICIANDO TESTE DE SINCRONIZA√á√ÉO")
    logger.info("=" * 60)
    
    try:
        # Tentar importar
        sys.path.append(os.path.dirname(os.path.abspath(__file__)))
        from src.main import app
        from src.database import db
        from src.models.kommo_account import KommoAccount
        from src.services.kommo_api import KommoSyncService
        
        logger.info("‚úÖ Imports realizados com sucesso")
        
        with app.app_context():
            # Buscar contas
            master_account = KommoAccount.query.filter_by(is_master=True).first()
            slave_accounts = KommoAccount.query.filter_by(is_master=False).all()
            
            if not master_account:
                logger.error("‚ùå Conta master n√£o encontrada")
                return
                
            if not slave_accounts:
                logger.error("‚ùå Contas slave n√£o encontradas")
                return
                
            logger.info(f"‚úÖ Master: {master_account.subdomain}")
            logger.info(f"‚úÖ Slaves: {[acc.subdomain for acc in slave_accounts]}")
            
            # Criar servi√ßo de sync
            sync_service = KommoSyncService()
            
            # Testar sincroniza√ß√£o
            logger.info("üîÑ Iniciando sincroniza√ß√£o de custom fields...")
            
            result = sync_service.sync_custom_fields(['leads'])
            
            logger.info(f"üìä Resultado: {result}")
            
    except ImportError as e:
        logger.error(f"‚ùå Erro de import: {e}")
        logger.info("üí° Tentando abordagem alternativa...")
        
        # Abordagem alternativa: usar requests diretamente
        test_direct_api_call()
    
    except Exception as e:
        logger.error(f"‚ùå Erro geral: {e}")
        import traceback
        logger.error(traceback.format_exc())

def test_direct_api_call():
    """Testa chamada direta √† API sem Flask"""
    logger.info("üîß TESTE DIRETO NA API")
    
    # Buscar dados do banco
    import sqlite3
    
    db_path = "src/database/app.db"
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    
    # Buscar master
    cursor.execute("SELECT subdomain, refresh_token FROM kommo_accounts WHERE is_master = 1")
    master = cursor.fetchone()
    
    if not master:
        logger.error("‚ùå Master n√£o encontrado")
        return
    
    logger.info(f"‚úÖ Master encontrado: {master['subdomain']}")
    
    # Aqui seria onde far√≠amos a chamada real √† API
    # Mas como n√£o temos as credenciais OAuth completas, vamos simular
    
    logger.info("üì° SIMULANDO CHAMADA √Ä API:")
    logger.info(f"GET https://{master['subdomain']}.amocrm.ru/api/v4/leads/custom_fields?with=required_statuses")
    
    # Simular resposta
    logger.info("üìã CAMPO 'texto longo' DEVERIA RETORNAR:")
    logger.info("   name: 'texto longo'")
    logger.info("   type: 'textarea'") 
    logger.info("   required_statuses: [{'pipeline_id': 11670079, 'status_id': 89684599}]")
    
    logger.info("üîÑ PROCESSAMENTO ESPERADO:")
    logger.info("   1. Buscar mapeamento pipeline 11670079 ‚Üí 11795583")
    logger.info("   2. Buscar mapeamento status 89684599 ‚Üí 90777427")
    logger.info("   3. Criar required_status mapeado: {'pipeline_id': 11795583, 'status_id': 90777427}")
    logger.info("   4. Enviar para slave com required_statuses mapeados")
    
    conn.close()

if __name__ == "__main__":
    print(f"üìù Log ser√° salvo em: {log_filename}")
    test_sync_custom_fields()
