"""
üîç AN√ÅLISE DE DIFEREN√áAS ENTRE ROLES MASTER E SLAVE
Vers√£o simplificada baseada nos dados dispon√≠veis
"""

import os
import sys
import json
import sqlite3
from datetime import datetime

def analyze_role_differences():
    """Analisa diferen√ßas entre roles master e slave"""
    print("üîç AN√ÅLISE DE DIFEREN√áAS ENTRE ROLES")
    print("=" * 60)
    
    # Conectar ao banco SQLite diretamente
    db_path = os.path.join('src', 'database', 'app.db')
    
    if not os.path.exists(db_path):
        print(f"‚ùå Banco de dados n√£o encontrado: {db_path}")
        print("üí° Execute primeiro os scripts de importa√ß√£o de contas")
        return
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # Buscar contas master e slave
        cursor.execute("""
            SELECT id, subdomain, account_role, access_token 
            FROM kommo_accounts 
            WHERE account_role IN ('master', 'slave')
            ORDER BY account_role DESC
        """)
        
        accounts = cursor.fetchall()
        
        print(f"üìä Encontradas {len(accounts)} contas:")
        for account in accounts:
            print(f"   ‚Ä¢ {account[1]} ({account[2]})")
        
        if len(accounts) < 2:
            print("‚ùå Erro: √â necess√°rio ter pelo menos 1 master e 1 slave")
            print("üí° Execute primeiro: python import_accounts_from_remote.py")
            return
        
        # Separar master e slave
        master_accounts = [acc for acc in accounts if acc[2] == 'master']
        slave_accounts = [acc for acc in accounts if acc[2] == 'slave']
        
        if not master_accounts or not slave_accounts:
            print("‚ùå Erro: √â necess√°rio ter pelo menos 1 master e 1 slave")
            return
        
        master_account = master_accounts[0]
        slave_account = slave_accounts[0]
        
        print(f"\nüéØ Contas encontradas:")
        print(f"   Master: {master_account[1]} (ID: {master_account[0]})")
        print(f"   Slave:  {slave_account[1]} (ID: {slave_account[0]})")
        
        # Verificar mapeamentos dispon√≠veis
        print("\nüó∫Ô∏è VERIFICANDO MAPEAMENTOS NO BANCO:")
        print("-" * 40)
        
        cursor.execute("""
            SELECT COUNT(*) FROM pipeline_mappings
        """)
        pipeline_count = cursor.fetchone()[0]
        
        cursor.execute("""
            SELECT COUNT(*) FROM stage_mappings
        """)
        stage_count = cursor.fetchone()[0]
        
        print(f"üìä Pipeline mappings: {pipeline_count}")
        print(f"üé≠ Stage mappings: {stage_count}")
        
        if pipeline_count > 0:
            cursor.execute("""
                SELECT master_id, slave_id, sync_group_id
                FROM pipeline_mappings
                ORDER BY master_id
            """)
            pipeline_mappings = cursor.fetchall()
            
            print(f"\nüìä PIPELINE MAPPINGS ({len(pipeline_mappings)}):")
            for mapping in pipeline_mappings:
                print(f"   ‚Ä¢ {mapping[0]} ‚Üí {mapping[1]} (grupo: {mapping[2]})")
        
        if stage_count > 0:
            cursor.execute("""
                SELECT master_id, slave_id, sync_group_id
                FROM stage_mappings
                ORDER BY master_id
                LIMIT 10
            """)
            stage_mappings = cursor.fetchall()
            
            print(f"\nüé≠ STAGE MAPPINGS (primeiros 10):")
            for mapping in stage_mappings:
                print(f"   ‚Ä¢ {mapping[0]} ‚Üí {mapping[1]} (grupo: {mapping[2]})")
            
            if stage_count > 10:
                print(f"   ... e mais {stage_count - 10}")
        
        # An√°lise baseada nas imagens fornecidas
        print("\nüì∏ AN√ÅLISE BASEADA NAS IMAGENS:")
        print("-" * 40)
        
        print("üîç Diferen√ßas observadas:")
        print("   Master (primeira imagem):")
        print("   ‚Ä¢ 3 roles configuradas (ROLE 1, ROLE 2, ROLE 3)")
        print("   ‚Ä¢ M√∫ltiplas etapas vis√≠veis (TESTE 3, TESTE gustavo, Pipeline Teste, etc.)")
        print("   ‚Ä¢ Configura√ß√µes complexas de status_rights")
        print()
        print("   Slave (segunda imagem):")
        print("   ‚Ä¢ 3 roles tamb√©m, mas com diferentes configura√ß√µes")
        print("   ‚Ä¢ Menos etapas de pipeline vis√≠veis")
        print("   ‚Ä¢ Status rights diferentes")
        
        # Verificar se h√° problemas potenciais
        print("\nüö® PROBLEMAS POTENCIAIS:")
        print("-" * 40)
        
        issues_found = False
        
        if pipeline_count == 0:
            print("‚ùå CR√çTICO: Nenhum mapeamento de pipeline encontrado!")
            print("   üí° Execute: sincroniza√ß√£o de pipelines primeiro")
            issues_found = True
        
        if stage_count == 0:
            print("‚ùå CR√çTICO: Nenhum mapeamento de stage encontrado!")
            print("   üí° Execute: sincroniza√ß√£o de pipelines primeiro")
            issues_found = True
        
        if not issues_found:
            print("‚úÖ Mapeamentos b√°sicos encontrados no banco")
        
        # Recomenda√ß√µes espec√≠ficas
        print("\nüí° RECOMENDA√á√ïES PARA CORRIGIR DIFEREN√áAS:")
        print("-" * 50)
        
        print("1. üîÑ SINCRONIZAR ROLES:")
        print("   ‚Ä¢ Execute sincroniza√ß√£o de roles da master para slave")
        print("   ‚Ä¢ Isso atualizar√° as configura√ß√µes de status_rights")
        print("   ‚Ä¢ Comando: POST /api/sync/trigger com sync_type='roles'")
        print()
        
        print("2. üó∫Ô∏è VERIFICAR MAPEAMENTOS:")
        if pipeline_count == 0 or stage_count == 0:
            print("   ‚Ä¢ Execute sincroniza√ß√£o de pipelines PRIMEIRO")
            print("   ‚Ä¢ Comando: POST /api/sync/trigger com sync_type='pipelines'")
        else:
            print("   ‚úÖ Mapeamentos encontrados no banco")
        print()
        
        print("3. üîç DIAGN√ìSTICO DETALHADO:")
        print("   ‚Ä¢ Execute teste de sync roles para verificar problemas")
        print("   ‚Ä¢ Comando: python test_sync_roles_simulation.py")
        print()
        
        print("4. üöÄ SEQU√äNCIA RECOMENDADA:")
        print("   1. Sincronizar pipelines (se necess√°rio)")
        print("   2. Sincronizar roles")
        print("   3. Verificar resultados")
        
        # Criar script de corre√ß√£o autom√°tica
        print("\nüíæ CRIANDO SCRIPT DE CORRE√á√ÉO...")
        
        correction_script = f"""
# Script de Corre√ß√£o Autom√°tica - Roles
# Gerado em: {datetime.now().isoformat()}

# Contas identificadas:
# Master: {master_account[1]} (ID: {master_account[0]})
# Slave:  {slave_account[1]} (ID: {slave_account[0]})

# Mapeamentos dispon√≠veis:
# Pipelines: {pipeline_count}
# Stages: {stage_count}

import requests
import json

def fix_role_sync():
    base_url = "http://localhost:5000"
    
    # 1. Verificar se precisa sincronizar pipelines primeiro
    if {pipeline_count} == 0 or {stage_count} == 0:
        print("üîÑ Sincronizando pipelines primeiro...")
        response = requests.post(f"{{base_url}}/api/sync/trigger", json={{
            "sync_type": "pipelines",
            "master_account_id": {master_account[0]},
            "slave_account_id": {slave_account[0]}
        }})
        print(f"Resultado pipelines: {{response.status_code}}")
    
    # 2. Sincronizar roles
    print("üîÑ Sincronizando roles...")
    response = requests.post(f"{{base_url}}/api/sync/trigger", json={{
        "sync_type": "roles", 
        "master_account_id": {master_account[0]},
        "slave_account_id": {slave_account[0]}
    }})
    print(f"Resultado roles: {{response.status_code}}")
    
    if response.status_code == 200:
        result = response.json()
        print("‚úÖ Sincroniza√ß√£o conclu√≠da!")
        print(f"Resultado: {{result}}")
    else:
        print(f"‚ùå Erro na sincroniza√ß√£o: {{response.text}}")

if __name__ == "__main__":
    fix_role_sync()
"""
        
        with open('fix_role_sync.py', 'w', encoding='utf-8') as f:
            f.write(correction_script)
        
        print("‚úÖ Script de corre√ß√£o criado: fix_role_sync.py")
        
        # Salvar an√°lise
        analysis_data = {
            'timestamp': datetime.now().isoformat(),
            'master_account': {
                'name': master_account[1],
                'id': master_account[0]
            },
            'slave_account': {
                'name': slave_account[1], 
                'id': slave_account[0]
            },
            'mappings': {
                'pipelines': pipeline_count,
                'stages': stage_count
            },
            'issues': {
                'missing_pipelines': pipeline_count == 0,
                'missing_stages': stage_count == 0,
                'role_differences_observed': True
            },
            'recommendations': [
                "Sincronizar pipelines se necess√°rio",
                "Sincronizar roles da master para slave",
                "Executar diagn√≥stico detalhado",
                "Verificar resultados nas interfaces"
            ]
        }
        
        with open('role_differences_analysis.json', 'w', encoding='utf-8') as f:
            json.dump(analysis_data, f, indent=2, ensure_ascii=False)
        
        print("‚úÖ An√°lise detalhada salva em: role_differences_analysis.json")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Erro durante an√°lise: {e}")
        return

if __name__ == "__main__":
    analyze_role_differences()
